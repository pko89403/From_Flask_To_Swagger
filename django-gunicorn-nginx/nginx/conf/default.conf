# user seokwoo;
# worker_processes 1; # worker process 갯수, auto로 두면 코어 수에 맞춰서 알아서 킨다.
# pid /var/log/nginx/new_nginx.pid; # nginx의 pid location을 지정한다.

# client_body_buffer_size 10K; from submission의 buffer size를 정의함
# client_max_body_size 8m; from submission의 max data size를 정의함, max 이상은 413 error 리턴
# client_header_buffer_size 1K; client header의 buffer size를 정의함
# sendfile on ; disk에 저장되어있던 static 파일이 response 될 때 buffer에 저장되지 않도록 설정한다
# tcp_nopush on; send file의 packet을 optimiz 하는 변수
# client_body_timeout 12; 연속적인 읽기 작업 사이의 시간
# client_header_timeout 12; 
# keepalive_timeout 15; client 가 여러 개의 파일을 보내거나, 무한히 connection을 연결하는 공격을 막고자 할 때
# send_timeout 10; client가 response된 data 중 아무것도 받지 않는 최대 시간을 정의

# events {
#     worker_connections 1024;
# }

# load balancer는 upstream 블록 안에 작성한다.
# upstream web { 
    # user sticky session
    # ip_hash; # load balancer는 동일한 ip adress가 요청한 request는 항상 동일한 server로 할당한다, Round-Robin
    # least_conn; # connections가 가장 적은 server로 request를 분재하고 싶은 경우


    # 로드 밸런싱 서버를 등록한다.
    # server web:3256;
    # server web:8001;
    # server web:8002;
#}

server  {
    location / { # location / 는 prefix match 다. / 로 시작하는 모든 uri에 대해 동일한 결과값을 출력한다
        # Reverse Proxy를 사용해 Nginx에 / 접근 시 web의 결과값을 return 하도록 변경한다.
        # /recommend 로 들어오면 http://web/recommend 로 전달 된다.
        proxy_pass http://web/; # proxy pass에 입력하는 uri는 반드시 /로 끝나도록 작성해야한다.
    }
    
    location /greet { # /greet request를 받은 경우
        # return 값으로 response code로 200을 response data로 string을 넘겨준다 
        return 200 'Hello from NGINX "/greet" location/'; 
    }

    listen 80; # 80번 포트를 listen하고 있는 
    server_name 127.0.0.1; # 127.0.0.1 virtualhost 가
#   root /sites/demo; # root 디렉토리로 /sites/demo를 바라보고 있다.
}
